{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to application documentation This is documentation to application for simulating optical communication that uses optical fibers. Purpose of the application is to demonstrate and visualize influence of some parameters of parts of optical communication model. Simulations should also provide better understanding of optical modulation and optical signal detection. This application was created as part of a bachelor thesis. Theme of the thesis was Laboratory exercises: Modulation in optical networks. Note: Application performance has not been optimized. Function dependencies Whole application was coded in Python language and is based on OptiCommPy package. This package was designed for simulating optical fiber communication with Python. It has many models and functions that are related to the communication. The simulating core of the application was built and inspired by this package. OptiCommPy is still under active development and the application was created with version 0.7.0-alpha. Github page of the package can be visited on https://github.com/edsonportosilva/OptiCommPy . In case of unclear understanding of the simulation process I recommend to visit OptiCommPy github and documentation. Graphical user interface was created with combination of Tkinter and CustomTkinter packages. CustomTkinter is based on regular Tkinter but provides some pre-prepared modern widgets designs. CustomTkinter project can be visited on https://github.com/TomSchimansky/CustomTkinter . Basic concept Application was built on an idea of optical fiber communication model . The main thing in the application is displayed communication model, whose properties by changed by user. Besides these properties of the model user can also change some parameters of the transmission signal, such as modulation format, modulation order and also transmission speed which isn't controlled directly but by transmission symbol rate. The communication model consists of optical source, modulator, transmission channel and optical detector. In addition optical amplifier can be optionally added to the transmission channel. Scheme of communication model is showed below. Communication model Which signal property user cannot control are data to transmit. On each start of the simulation a new pseudo-random bit sequence is generated which represents the information. Installation Note: Installed Python is needed. Because project contains only source scripts the recommended installation is: Clone github repository of the project git clone https://github.com/jurkovicmartin/OpticalSimulation Install OptiCommPy package. The package will also install other needed packages like numpy, matplotlib, etc. pip install OptiCommPy Install Tkinter and CustomTkinter package pip install tk pip install customtkinter This should be everything needed for compilation. Now run \"app.py\" script to start the application. You can run it with some python code editor or by console. For console start navigate to the folder where the project is located a type command python app.py or py app.py","title":"Introduction"},{"location":"#welcome-to-application-documentation","text":"This is documentation to application for simulating optical communication that uses optical fibers. Purpose of the application is to demonstrate and visualize influence of some parameters of parts of optical communication model. Simulations should also provide better understanding of optical modulation and optical signal detection. This application was created as part of a bachelor thesis. Theme of the thesis was Laboratory exercises: Modulation in optical networks. Note: Application performance has not been optimized.","title":"Welcome to application documentation"},{"location":"#function-dependencies","text":"Whole application was coded in Python language and is based on OptiCommPy package. This package was designed for simulating optical fiber communication with Python. It has many models and functions that are related to the communication. The simulating core of the application was built and inspired by this package. OptiCommPy is still under active development and the application was created with version 0.7.0-alpha. Github page of the package can be visited on https://github.com/edsonportosilva/OptiCommPy . In case of unclear understanding of the simulation process I recommend to visit OptiCommPy github and documentation. Graphical user interface was created with combination of Tkinter and CustomTkinter packages. CustomTkinter is based on regular Tkinter but provides some pre-prepared modern widgets designs. CustomTkinter project can be visited on https://github.com/TomSchimansky/CustomTkinter .","title":"Function dependencies"},{"location":"#basic-concept","text":"Application was built on an idea of optical fiber communication model . The main thing in the application is displayed communication model, whose properties by changed by user. Besides these properties of the model user can also change some parameters of the transmission signal, such as modulation format, modulation order and also transmission speed which isn't controlled directly but by transmission symbol rate. The communication model consists of optical source, modulator, transmission channel and optical detector. In addition optical amplifier can be optionally added to the transmission channel. Scheme of communication model is showed below. Communication model Which signal property user cannot control are data to transmit. On each start of the simulation a new pseudo-random bit sequence is generated which represents the information.","title":"Basic concept"},{"location":"#installation","text":"Note: Installed Python is needed. Because project contains only source scripts the recommended installation is: Clone github repository of the project git clone https://github.com/jurkovicmartin/OpticalSimulation Install OptiCommPy package. The package will also install other needed packages like numpy, matplotlib, etc. pip install OptiCommPy Install Tkinter and CustomTkinter package pip install tk pip install customtkinter This should be everything needed for compilation. Now run \"app.py\" script to start the application. You can run it with some python code editor or by console. For console start navigate to the folder where the project is located a type command python app.py or py app.py","title":"Installation"},{"location":"guide/","text":"User guide for application usage Navigation Navigation in the application is done by tabs in the top part of the window. Application has in total 3 tabs. First one is Input settings where simulation settings are done. Second one is Outputs where results of the simulation are presented to the user. Last one is Help . Input settings tab The window is divided into two main sections. The upper one is for general parameters settings. Under that is displayed the communication model. By clicking on some displayed part a new window will show up where parameters of that part can be set. At the bottom of the window there is simulate and quit button. After clicking simulate button simulation process is started. Outputs tab Application presents two types of outputs to user. First ones are numeric which are shown every time after successful simulation. Other ones are graphical which are shown after users request. After that a new window is displayed with corresponding graphs. Help tab This tab contains simple theory about modulation process. Also short definitions to each parameter that user can change is included. On top of these descriptions two prepared examples are situated here. After clicking the example button all parameters in input settings tab are set. Application is then ready to start simulation. User inputs Most of the parameters listed below can be set to the \"ideal\" state. This option allows the user to have more control over the simulation process and eliminate influence of some part(s) of the communication model. This way a influence of a single part can be demonstrated. Type Parameter Description Range of values General Modulation format - OOK / PAM / PSK / QAM General Order of modulation - Depends on format General Symbol rate symbols/s 10^6 <= x < 10^12 Source Power dBm -20 <= x <= 50 Source Central frequency THz 170 <= x <= 250 Source Linewidth MHz / kHz / Hz 1 Hz <= x <= 1 GHz Source Relative intensity noise dB/Hz -250 <= x <= 0 Modulator Type - PM / MZM / IQM Transmission channel Length km 0 < x <= 1000 Transmission channel Attenuation dB/km 0 <= x <= 5 Transmission channel Chromatic dispersion ps/nm/km 0 <= x <= 200 Detector Type - Photodiode / coherent Detector Bandwidth GHz / MHz / kHz / Hz 0 Hz < x <= Based on symbol rate Detector Responsivity A/W 0 < x <= 10 Amplifier Position in channel - start / middle / end Amplifier Gain dB 0 < x <= 50 Amplifier Noise figure dB 0 <= x <= 100 Amplifier Sensitivity dBm -50 <= x <= 100 User outputs Type Output Description Numeric Transmitted power dBm / mW Numeric Received power dBm / mW Numeric Transmission speed b/s Numeric Bit error rate - Numeric Symbol error rate - Numeric Signal-to-noise ratio dB Graphic Information signals in time Modulated / after detection Graphic Optical signals in time Carrier / transmitted modulated / received modulated Graphic Spectrums Carrier / transmitted / received Graphic Constellation diagrams Transmitted / received Graphic Eye diagrams Transmitted / received Simulation start To start the simulation couple of steps needs to be done. It is good idea to set general parameters first. By default general parameters are set in some way that does allow simulation to start but it is recommended to check them and set them to get desired simulation. On the other way all communication model parameters are set to 0. With these values simulation cannot be started so user must set these parameters. If user tries to set invalid parameter value like text instead of number error massage is shown that alerts the user on invalid parameter and why is his value invalid. After all parameters are set simulate button needs to be clicked. After clicking that button simulation process starts or another error message is shown telling user why the simulation cannot start. After simulation is finished message is shown telling user if the process was successful or not. In case it hasn't been successful message contains information about the reason why was simulation unsuccessful.","title":"User guide"},{"location":"guide/#user-guide-for-application-usage","text":"","title":"User guide for application usage"},{"location":"guide/#navigation","text":"Navigation in the application is done by tabs in the top part of the window. Application has in total 3 tabs. First one is Input settings where simulation settings are done. Second one is Outputs where results of the simulation are presented to the user. Last one is Help .","title":"Navigation"},{"location":"guide/#input-settings-tab","text":"The window is divided into two main sections. The upper one is for general parameters settings. Under that is displayed the communication model. By clicking on some displayed part a new window will show up where parameters of that part can be set. At the bottom of the window there is simulate and quit button. After clicking simulate button simulation process is started.","title":"Input settings tab"},{"location":"guide/#outputs-tab","text":"Application presents two types of outputs to user. First ones are numeric which are shown every time after successful simulation. Other ones are graphical which are shown after users request. After that a new window is displayed with corresponding graphs.","title":"Outputs tab"},{"location":"guide/#help-tab","text":"This tab contains simple theory about modulation process. Also short definitions to each parameter that user can change is included. On top of these descriptions two prepared examples are situated here. After clicking the example button all parameters in input settings tab are set. Application is then ready to start simulation.","title":"Help tab"},{"location":"guide/#user-inputs","text":"Most of the parameters listed below can be set to the \"ideal\" state. This option allows the user to have more control over the simulation process and eliminate influence of some part(s) of the communication model. This way a influence of a single part can be demonstrated. Type Parameter Description Range of values General Modulation format - OOK / PAM / PSK / QAM General Order of modulation - Depends on format General Symbol rate symbols/s 10^6 <= x < 10^12 Source Power dBm -20 <= x <= 50 Source Central frequency THz 170 <= x <= 250 Source Linewidth MHz / kHz / Hz 1 Hz <= x <= 1 GHz Source Relative intensity noise dB/Hz -250 <= x <= 0 Modulator Type - PM / MZM / IQM Transmission channel Length km 0 < x <= 1000 Transmission channel Attenuation dB/km 0 <= x <= 5 Transmission channel Chromatic dispersion ps/nm/km 0 <= x <= 200 Detector Type - Photodiode / coherent Detector Bandwidth GHz / MHz / kHz / Hz 0 Hz < x <= Based on symbol rate Detector Responsivity A/W 0 < x <= 10 Amplifier Position in channel - start / middle / end Amplifier Gain dB 0 < x <= 50 Amplifier Noise figure dB 0 <= x <= 100 Amplifier Sensitivity dBm -50 <= x <= 100","title":"User inputs"},{"location":"guide/#user-outputs","text":"Type Output Description Numeric Transmitted power dBm / mW Numeric Received power dBm / mW Numeric Transmission speed b/s Numeric Bit error rate - Numeric Symbol error rate - Numeric Signal-to-noise ratio dB Graphic Information signals in time Modulated / after detection Graphic Optical signals in time Carrier / transmitted modulated / received modulated Graphic Spectrums Carrier / transmitted / received Graphic Constellation diagrams Transmitted / received Graphic Eye diagrams Transmitted / received","title":"User outputs"},{"location":"guide/#simulation-start","text":"To start the simulation couple of steps needs to be done. It is good idea to set general parameters first. By default general parameters are set in some way that does allow simulation to start but it is recommended to check them and set them to get desired simulation. On the other way all communication model parameters are set to 0. With these values simulation cannot be started so user must set these parameters. If user tries to set invalid parameter value like text instead of number error massage is shown that alerts the user on invalid parameter and why is his value invalid. After all parameters are set simulate button needs to be clicked. After clicking that button simulation process starts or another error message is shown telling user why the simulation cannot start. After simulation is finished message is shown telling user if the process was successful or not. In case it hasn't been successful message contains information about the reason why was simulation unsuccessful.","title":"Simulation start"},{"location":"layout/","text":"Project files layout In the following text each part of the project is more specified. The purpose and role of each script will be outlined here. Layout of the project. main \u251c\u2500\u2500 img \u251c\u2500\u2500 scripts \u2502 \u251c\u2500\u2500 help_gui.py \u2502 \u251c\u2500\u2500 main_gui.py \u2502 \u251c\u2500\u2500 my_models.py \u2502 \u251c\u2500\u2500 my_plot.py \u2502 \u251c\u2500\u2500 other_functions.py \u2502 \u251c\u2500\u2500 parameters_functions.py \u2502 \u251c\u2500\u2500 parameters_window.py \u2502 \u251c\u2500\u2500 simulation.py \u2502 \u2514\u2500\u2500 tooltip.py \u2514\u2500\u2500 app.py app.py script Startup script for application run. scripts folder Source codes for the application function. help_gui.py The \"help\" tab content and design. main_gui.py The main window of the application. Handles main window design and layout. Also handles parameters values storing and displaying plus simulation outputs storing and displaying. my_models.py Models for simulation that have been created in addition to models from OptiCommPy package or that have been copied from OptiCommPy and modified to better suit the needs of the application. my_plots.py Functions to create graphical outputs of the simulation. Some functions have been taken from OptiCommPy package and modified. other_functions.py Script for other functions that haven't been included as a simulation function, parameter function or as a method of a class. Contains only one function that calculates transmission speed. parameters_functions.py Functions for converting communication model parameters to float and validating them. It validates whether the input value is a number and if the number lies within the specified range of values. parameters_window.py Popup window to insert communication model part parameters. Handles graphical design and layout of the window and contains methods to set the parameters and give it back to the main window. plots_window.py Popup window to display graphical outputs of the simulation to the user. simulation.py Functions that handles the simulation process. The main function here takes parameters that have been set in the main window and returns simulation results. tooltip.py Little tooltip bubble to help the user to better understand some parts of the application. img folder There are images that are displayed in the \"help\" tab of the application and images used in README.md file.","title":"Project layout"},{"location":"layout/#project-files-layout","text":"In the following text each part of the project is more specified. The purpose and role of each script will be outlined here. Layout of the project. main \u251c\u2500\u2500 img \u251c\u2500\u2500 scripts \u2502 \u251c\u2500\u2500 help_gui.py \u2502 \u251c\u2500\u2500 main_gui.py \u2502 \u251c\u2500\u2500 my_models.py \u2502 \u251c\u2500\u2500 my_plot.py \u2502 \u251c\u2500\u2500 other_functions.py \u2502 \u251c\u2500\u2500 parameters_functions.py \u2502 \u251c\u2500\u2500 parameters_window.py \u2502 \u251c\u2500\u2500 simulation.py \u2502 \u2514\u2500\u2500 tooltip.py \u2514\u2500\u2500 app.py","title":"Project files layout"},{"location":"layout/#apppy-script","text":"Startup script for application run.","title":"app.py script"},{"location":"layout/#scripts-folder","text":"Source codes for the application function.","title":"scripts folder"},{"location":"layout/#help_guipy","text":"The \"help\" tab content and design.","title":"help_gui.py"},{"location":"layout/#main_guipy","text":"The main window of the application. Handles main window design and layout. Also handles parameters values storing and displaying plus simulation outputs storing and displaying.","title":"main_gui.py"},{"location":"layout/#my_modelspy","text":"Models for simulation that have been created in addition to models from OptiCommPy package or that have been copied from OptiCommPy and modified to better suit the needs of the application.","title":"my_models.py"},{"location":"layout/#my_plotspy","text":"Functions to create graphical outputs of the simulation. Some functions have been taken from OptiCommPy package and modified.","title":"my_plots.py"},{"location":"layout/#other_functionspy","text":"Script for other functions that haven't been included as a simulation function, parameter function or as a method of a class. Contains only one function that calculates transmission speed.","title":"other_functions.py"},{"location":"layout/#parameters_functionspy","text":"Functions for converting communication model parameters to float and validating them. It validates whether the input value is a number and if the number lies within the specified range of values.","title":"parameters_functions.py"},{"location":"layout/#parameters_windowpy","text":"Popup window to insert communication model part parameters. Handles graphical design and layout of the window and contains methods to set the parameters and give it back to the main window.","title":"parameters_window.py"},{"location":"layout/#plots_windowpy","text":"Popup window to display graphical outputs of the simulation to the user.","title":"plots_window.py"},{"location":"layout/#simulationpy","text":"Functions that handles the simulation process. The main function here takes parameters that have been set in the main window and returns simulation results.","title":"simulation.py"},{"location":"layout/#tooltippy","text":"Little tooltip bubble to help the user to better understand some parts of the application.","title":"tooltip.py"},{"location":"layout/#img-folder","text":"There are images that are displayed in the \"help\" tab of the application and images used in README.md file.","title":"img folder"},{"location":"logic/","text":"Basic logic As mentioned before the idea of application is to display communication model. With this model user can control the simulation. The basic structure of simulation is similar to the real communication channel which means that steps done in simulation process are inspired by steps of real signal processing. For this approach OptiCommPy package was really useful because it provides models and functions to follow this concept. Steps of simulation For better understanding the logic of the simulation will be divided into three sections. First one is transmitter which contains optical source, information source and modulator. Second one is transmission channel with amplifier. Last one is receiver which contains detector and information restore. Divided communication channel Data storage In the application data storing is done by dictionaries. The key property of dictionary is that it stores information as key, value pairs. Also no duplicate keys are allowed. Every time as a key a parameter name is used. That means two same parameters cannot be stored that could happen by accident. Another reason for using dictionaries is that when a parameter value is needed you can get it from dictionary by its name (key). This should make the program more readable. Graphical outputs are also stored in dictionary. In this case the value is a figure, axes tuple. Figure and axes are objects from matplotlib package. Figures are then displayed using tkinter canvas. Transmitter The generation of the modulation signal can be divided into three steps. In the first step, a random sequence of bits is generated to represent the information to be transmitted. These bits are then used to form symbols. The symbol words are formed with Gray's code and are directly influenced by the format and modulation order settings specified by the user (general parameters). The last step is the generation of the signal pulses. In this step, a large number of samples are generated from a sequence of symbols that together represent a continuous modulation signal. The generation of the carrier signal is logically performed after the modulation signal. This is because the modulation signal and the carrier signal must have the same number of signal samples. The carrier signal has constant power and constant phase. The last task of the transmitting part is to perform the modulation . This task already requires knowledge of the modulation and carrier signals, which are the input parameters of the different modulator models. The output is the modulated signal. Basic transmitter logic Transmission channel Transmission channel and amplifier can form the following combinations. Each combination has a little different logic. Ideal transmission channel without amplifier Ideal transmission channel with ideal amplifier Ideal transmission channel with non-ideal amplifier Transmission channel without amplifier Transmission channel with ideal amplifier Transmission channel with non-ideal amplifier In case of combination with only the ideal transmission channel, i.e. without amplifier, the modulated signal is transmitted directly to the output. This is the simplest case. Similar is case of an ideal transmission channel and a general amplifier. In case of ideal channel position of amplifier doesn't matter. Where position can no longer be ignored are combinations with a non-ideal transmission channel and a general amplifier. In this case, the position of the amplifier plays a big role and the connection of the simulation models is adapted to this. As an example, if the amplifier is placed in the middle of the channel length that is input by the user is divided in half. The first half is then placed in front of the amplifier and the second half behind it. There is also a significant difference between using an ideal and a non-ideal amplifier. In case of non-ideal amplifier a condition if the input signal has enough power is tested (this power limit is one of amplifiers parameters). If this input power isn't enough, the user is alerted to this fact and the simulation is not completed. Basic transmission channel logic Receiver Two types of detection are available, simple intensity detection with a photodiode and coherent detection with multiple photodiodes. The output of detection model is the signal after detection, from which the symbols are read out. Note: Detected symbols are formed back to bits which are not used in the application Basic receiver logic","title":"Basic logic"},{"location":"logic/#basic-logic","text":"As mentioned before the idea of application is to display communication model. With this model user can control the simulation. The basic structure of simulation is similar to the real communication channel which means that steps done in simulation process are inspired by steps of real signal processing. For this approach OptiCommPy package was really useful because it provides models and functions to follow this concept. Steps of simulation For better understanding the logic of the simulation will be divided into three sections. First one is transmitter which contains optical source, information source and modulator. Second one is transmission channel with amplifier. Last one is receiver which contains detector and information restore. Divided communication channel","title":"Basic logic"},{"location":"logic/#data-storage","text":"In the application data storing is done by dictionaries. The key property of dictionary is that it stores information as key, value pairs. Also no duplicate keys are allowed. Every time as a key a parameter name is used. That means two same parameters cannot be stored that could happen by accident. Another reason for using dictionaries is that when a parameter value is needed you can get it from dictionary by its name (key). This should make the program more readable. Graphical outputs are also stored in dictionary. In this case the value is a figure, axes tuple. Figure and axes are objects from matplotlib package. Figures are then displayed using tkinter canvas.","title":"Data storage"},{"location":"logic/#transmitter","text":"The generation of the modulation signal can be divided into three steps. In the first step, a random sequence of bits is generated to represent the information to be transmitted. These bits are then used to form symbols. The symbol words are formed with Gray's code and are directly influenced by the format and modulation order settings specified by the user (general parameters). The last step is the generation of the signal pulses. In this step, a large number of samples are generated from a sequence of symbols that together represent a continuous modulation signal. The generation of the carrier signal is logically performed after the modulation signal. This is because the modulation signal and the carrier signal must have the same number of signal samples. The carrier signal has constant power and constant phase. The last task of the transmitting part is to perform the modulation . This task already requires knowledge of the modulation and carrier signals, which are the input parameters of the different modulator models. The output is the modulated signal. Basic transmitter logic","title":"Transmitter"},{"location":"logic/#transmission-channel","text":"Transmission channel and amplifier can form the following combinations. Each combination has a little different logic. Ideal transmission channel without amplifier Ideal transmission channel with ideal amplifier Ideal transmission channel with non-ideal amplifier Transmission channel without amplifier Transmission channel with ideal amplifier Transmission channel with non-ideal amplifier In case of combination with only the ideal transmission channel, i.e. without amplifier, the modulated signal is transmitted directly to the output. This is the simplest case. Similar is case of an ideal transmission channel and a general amplifier. In case of ideal channel position of amplifier doesn't matter. Where position can no longer be ignored are combinations with a non-ideal transmission channel and a general amplifier. In this case, the position of the amplifier plays a big role and the connection of the simulation models is adapted to this. As an example, if the amplifier is placed in the middle of the channel length that is input by the user is divided in half. The first half is then placed in front of the amplifier and the second half behind it. There is also a significant difference between using an ideal and a non-ideal amplifier. In case of non-ideal amplifier a condition if the input signal has enough power is tested (this power limit is one of amplifiers parameters). If this input power isn't enough, the user is alerted to this fact and the simulation is not completed. Basic transmission channel logic","title":"Transmission channel"},{"location":"logic/#receiver","text":"Two types of detection are available, simple intensity detection with a photodiode and coherent detection with multiple photodiodes. The output of detection model is the signal after detection, from which the symbols are read out. Note: Detected symbols are formed back to bits which are not used in the application Basic receiver logic","title":"Receiver"},{"location":"screenshots/","text":"Screenshots GUI screenshots Main window with settings Window to set parameters of amplifier Outputs tab Help tab Outputs screenshots OOK modulated signal PSK modulated signal QPSK constallations diagrams Carrier and OOK spectrum PAM4 eye diagrams","title":"Screenshots"},{"location":"screenshots/#screenshots","text":"","title":"Screenshots"},{"location":"screenshots/#gui-screenshots","text":"Main window with settings Window to set parameters of amplifier Outputs tab Help tab","title":"GUI screenshots"},{"location":"screenshots/#outputs-screenshots","text":"OOK modulated signal PSK modulated signal QPSK constallations diagrams Carrier and OOK spectrum PAM4 eye diagrams","title":"Outputs screenshots"}]}